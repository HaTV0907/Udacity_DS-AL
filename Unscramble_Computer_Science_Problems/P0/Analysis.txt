Task 0: Worst-case time complexity is O(1)- The time complexity for this program is O(1)
        because I are accessing the first and last values from the lists (calls and texts) by an index.

Task 1: Worst-Case Big-O Notation is O(n)
        + Reading the 'texts.csv' file: The code opens the 'texts.csv' file and reads its contents using the csv.reader() function.
        It then appends the telephone numbers from the 'texts.csv' file to the nums list. Since it reads all the entries in the file,
        the time complexity of this operation is O(n), where n is the number of entries in the 'texts.csv' file.
        + Reading the 'calls.csv' file: Similar to reading the 'texts.csv' file, the code opens the 'calls.csv' file
        and reads its contents using the csv.reader() function. It then appends the telephone numbers from the 'calls.csv' file to the nums list.
        Again, the time complexity of this operation is O(n), where n is the number of entries in the 'calls.csv' file.
        + Creating a set of unique numbers: The code creates a set called unique_nums from the nums list.
        Since it iterates over all the numbers in the nums list, the time complexity of this operation is O(n),
        where n is the total number of entries in both files.
        + Printing the count of unique telephone numbers: The code prints the count of unique telephone numbers by getting the length of the unique_nums set.
        Since it performs a single operation to get the length, the time complexity of this operation is O(1).
        => Overall, the time complexity of the code is dominated by the operations that iterate over the entries in the 'texts.csv' and 'calls.csv' files,
        which gives us a time complexity of O(n).

Task 2: Worst-Case Big-O Notation is O(n^2) 
        + Reading the 'texts.csv' file: The code opens the 'texts.csv' file and reads its contents using the csv.reader() function.
        It then appends the telephone numbers from the 'texts.csv' file to the nums list. Since it reads all the entries in the file,
        the time complexity of this operation is O(n), where n is the number of entries in the 'texts.csv' file.
        + Reading the 'calls.csv' file: Similar to reading the 'texts.csv' file, the code opens the 'calls.csv' file
        and reads its contents using the csv.reader() function. It then appends the telephone numbers from the 'calls.csv' file to the nums list.
        Again, the time complexity of this operation is O(n), where n is the number of entries in the 'calls.csv' file.
        + Creating a set of unique numbers: The code creates a set called unique_nums from the nums list.
        Since it iterates over all the numbers in the calls for each item in ique_num list to calculate the call duration,
        the time complexity of this operation is O(n^2), where n is the total number of entries in both files.
        + Printing the count of unique telephone numbers: The code prints the count of unique telephone numbers
        by getting the length of the unique_nums set. Since it performs a single operation to get the length,
        the time complexity of this operation is O(1).
        => Overall, the time complexity of the code is dominated by the operations that iterate over the entries unique_nums and calls,
        which gives us a time complexity of O(n^2).

Task 3: Worst-Case Big-O Notation is O(n)
        + Reading the 'calls.csv' file: The code opens the 'calls.csv' file and reads its contents using the csv.reader() function.
        It then iterates over each entry in the file, which takes O(n) time, where n is the number of entries in the 'calls.csv' file.
        + Creating a list of receivers: The code creates a list called 'receivers' to store the numbers called from people in Bangalore.
        It iterates over each entry in the 'calls.csv' file and checks if the number starts with "(080)". The time complexity of this operation is O(n),
        where n is the number of entries in the 'calls.csv' file.
        + Creating a set of unique receivers: The code creates a set called 'uniqueReceivers' from the 'receivers' list.
        Since it iterates over all the numbers in the 'receivers' list, the time complexity of this operation is O(n),
        where n is the number of unique receivers.
        + Finding the area codes, mobile prefixes, and telemarketers: The code iterates over the unique receivers
        and checks if each number matches the criteria for area codes, mobile prefixes, or telemarketers.
        The time complexity of this operation is O(n), where n is the number of unique receivers.
        + Printing the numbers with codes: The code prints each number with its code.
        Since it prints all the numbers once, the time complexity of this operation is O(n),
        where n is the number of numbers with codes.
        + Finding the percentage of calls to other fixed lines in Bangalore: The code iterates over the 'calls' list
        and checks if each call is from a number starting with "(080)".
        It also checks if the receiver of the call is also a number starting with "(080)".
        The time complexity of this operation is O(n), where n is the number of entries in the 'calls.csv' file.
        + Printing the percentage: The code prints the percentage of calls to other fixed lines in Bangalore.
        Since it performs a single operation to calculate the percentage, the time complexity of this operation is O(1).
        => Overall, the time complexity of the code is dominated by the operations that iterate over the entries in the 'calls.csv' file,
        which gives us a time complexity of O(n).

Task 4: Worst-Case Big-O Notation is O(n)
        + Reading the 'texts.csv' file: The code opens the 'texts.csv' file and reads its contents using the csv.reader() function.
        Since it reads all the entries in the file, the time complexity of this operation is O(n), where n is the number of entries in the 'texts.csv' file.
        + Reading the 'calls.csv' file: Similar to reading the 'texts.csv' file, the code opens the 'calls.csv' file and reads its contents
        using the csv.reader() function. Again, the time complexity of this operation is O(n), where n is the number of entries in the 'calls.csv' file.
        + Creating lists of numbers: The code iterates over the entries in the 'texts.csv' and 'calls.csv' files and appends the numbers
        to separate lists (textNums, callNums, receiveNums). Since it iterates over all the entries once, the time complexity of this operation is O(n),
        where n is the total number of entries in both files.
        + Checking for telemarketers: The code defines a function telemarketers() that checks if a given number is a telemarketer.
        It checks if the number is not present in the textNums and receiveNums lists. Since these lists contain all the numbers
        from the 'texts.csv' and 'calls.csv' files, the time complexity of checking if a number is a telemarketer is O(1).
        + Creating a list of telemarketers: The code iterates over the callNums list (which contains unique numbers)
        and checks if each number is a telemarketer using the telemarketers() function.
        If it is a telemarketer, the number is appended to the teleNums list. Since it iterates over all the numbers once,
        the time complexity of this operation is O(n), where n is the number of unique numbers in the callNums list.
        + Printing the telemarketer numbers: The code prints each number in the teleNums list.
        Since it prints all the numbers once, the time complexity of this operation is O(n), where n is the number of telemarketer numbers.
        => Overall, the time complexity of the code is dominated by the operations that iterate over the entries in the 'texts.csv' and 'calls.csv' files,
        which gives us a time complexity of O(n).